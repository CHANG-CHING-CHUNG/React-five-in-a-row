{"version":3,"sources":["functions/calculateWinner.js","index.js"],"names":["calculateWinner","squares","x","y","mark","COL_MAX_LENGTH","length","ROW_MAX_LENGTH","playerMark","winner","map","rightTotal","rowRight","filter","leftTotal","rowLeft","upTotal","colUp","downTotal","colDown","upperRightTotal","upperRight","upperLeftTotal","upperLeft","bottomRightTotal","bottomRight","bottomLeftTotal","bottomLeft","results","helpCheckWin","counter","oldMap","JSON","parse","stringify","push","loopCheckingMarks","Square","chess","value","onClick","className","class","step","Board","props","renderSquare","rowNum","i","rows","col","j","renderRows","Game","useState","history","Array","fill","stepNumber","xIsNet","state","setState","current","moves","move","desc","slice","jumpTo","status","saveBtn","formattedToday","Date","toISOString","html2canvas","document","querySelector","then","canvas","toBlob","blob","saveAs","saveBoardStatus","winnerMark","newSquares","concat","handkeClick","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5e860224.chunk.js","sourcesContent":["function loopCheckingMarks(\n  squares,\n  x,\n  y,\n  COL_MAX_LENGTH,\n  ROW_MAX_LENGTH,\n  counter,\n  playerMark,\n  oldMap\n) {\n  const map = JSON.parse(JSON.stringify(oldMap));\n  while (\n    y + counter <= ROW_MAX_LENGTH &&\n    squares[x][y + counter].mark === playerMark\n  ) {\n    map.rowRight.push(squares[x][y + counter].mark);\n    counter++;\n  }\n  counter = 1;\n  while (y - counter >= 0 && squares[x][y - counter].mark === playerMark) {\n    map.rowLeft.push(squares[x][y - counter].mark);\n    counter++;\n  }\n  counter = 1;\n  while (\n    x + counter <= COL_MAX_LENGTH &&\n    squares[x + counter][y].mark === playerMark\n  ) {\n    map.colDown.push(squares[x + counter][y].mark);\n    counter++;\n  }\n  counter = 1;\n  while (x - counter >= 0 && squares[x - counter][y].mark === playerMark) {\n    map.colUp.push(squares[x - counter][y].mark);\n    counter++;\n  }\n  counter = 1;\n  while (\n    x - counter >= 0 &&\n    y - counter >= 0 &&\n    squares[x - counter][y - counter].mark === playerMark\n  ) {\n    map.upperLeft.push(squares[x - counter][y - counter].mark);\n    counter++;\n  }\n  counter = 1;\n  while (\n    x - counter >= 0 &&\n    y + counter <= ROW_MAX_LENGTH &&\n    squares[x - counter][y + counter].mark === playerMark\n  ) {\n    map.upperRight.push(squares[x - counter][y + counter].mark);\n    counter++;\n  }\n  counter = 1;\n  while (\n    x + counter <= COL_MAX_LENGTH &&\n    y + counter <= ROW_MAX_LENGTH &&\n    squares[x + counter][y + counter].mark === playerMark\n  ) {\n    map.bottomRight.push(squares[x + counter][y + counter].mark);\n    counter++;\n  }\n  counter = 1;\n\n  while (\n    x + counter <= COL_MAX_LENGTH &&\n    y - counter >= 0 &&\n    squares[x + counter][y - counter].mark === playerMark\n  ) {\n    map.bottomLeft.push(squares[x + counter][y - counter].mark);\n    counter++;\n  }\n\n  return map;\n}\n\nfunction calculateWinner(squares, x, y) {\n  if (squares[x][y].mark === null) {\n    return;\n  }\n  const COL_MAX_LENGTH = squares[0].length - 1;\n  const ROW_MAX_LENGTH = squares.length - 1;\n  const playerMark = squares[x][y].mark;\n  let counter = 1;\n  const map = {\n    rowRight: [],\n    colDown: [],\n    rowLeft: [],\n    colUp: [],\n    upperLeft: [],\n    upperRight: [],\n    bottomLeft: [],\n    bottomRight: [],\n  };\n\n  const newMap = loopCheckingMarks(\n    squares,\n    x,\n    y,\n    COL_MAX_LENGTH,\n    ROW_MAX_LENGTH,\n    counter,\n    playerMark,\n    map\n  );\n\n  const winner = helpCheckWin(newMap, playerMark);\n  if (winner) {\n    return winner;\n  }\n  return null;\n}\n\nfunction helpCheckWin(map, playerMark) {\n  const rightTotal = map.rowRight.filter((mark) => mark === playerMark).length;\n  const leftTotal = map.rowLeft.filter((mark) => mark === playerMark).length;\n  const upTotal = map.colUp.filter((mark) => mark === playerMark).length;\n  const downTotal = map.colDown.filter((mark) => mark === playerMark).length;\n\n  const upperRightTotal = map.upperRight.filter((mark) => mark === playerMark)\n    .length;\n  const upperLeftTotal = map.upperLeft.filter((mark) => mark === playerMark)\n    .length;\n  const bottomRightTotal = map.bottomRight.filter((mark) => mark === playerMark)\n    .length;\n  const bottomLeftTotal = map.bottomLeft.filter((mark) => mark === playerMark)\n    .length;\n  const results = {\n    rightTotal,\n    leftTotal,\n    upTotal,\n    downTotal,\n    upperRightTotal,\n    upperLeftTotal,\n    bottomRightTotal,\n    bottomLeftTotal,\n  };\n\n  if (results.rightTotal === 4 || results.leftTotal === 4) {\n    return playerMark;\n  } else if (results.upTotal === 4 || results.downTotal === 4) {\n    return playerMark;\n  } else if (\n    results.rightTotal + results.leftTotal === 4 ||\n    results.upTotal + results.downTotal === 4\n  ) {\n    return playerMark;\n  } else if (results.upperLeftTotal === 4 || results.bottomRightTotal === 4) {\n    return playerMark;\n  } else if (results.upperRightTotal === 4 || results.bottomLeftTotal === 4) {\n    return playerMark;\n  } else if (\n    results.upperLeftTotal + results.bottomRightTotal === 4 ||\n    results.upperRightTotal + results.bottomLeftTotal === 4\n  ) {\n    return playerMark;\n  }\n\n  return null;\n}\nexport default calculateWinner;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport calculateWinner from \"./functions/calculateWinner\";\nimport html2canvas from \"html2canvas\";\nimport { saveAs } from \"file-saver\";\n\nfunction Square({ value, winner, onClick }) {\n  let chess;\n  if (value.mark === \"X\") {\n    chess = (\n      <div className={\"black \"}>\n        {winner ? <span class=\"white-step\">{value.step}</span> : null}\n      </div>\n    );\n  } else if (value.mark === \"O\") {\n    chess = (\n      <div className={\"white \"}>\n        {winner ? <span class=\"black-step\">{value.step}</span> : null}\n      </div>\n    );\n  }\n  return (\n    <button className=\"square\" onClick={() => onClick()}>\n      {chess}\n    </button>\n  );\n}\n\nfunction Board(props) {\n  function renderSquare(rowNum, i) {\n    return (\n      <Square\n        value={props.squares[rowNum][i]}\n        winner={props.winner}\n        onClick={() => props.onClick(rowNum, i)}\n      />\n    );\n  }\n\n  function renderRows() {\n    const rows = [];\n    for (let i = 0; i < 19; i++) {\n      const col = [];\n      for (let j = 0; j < 19; j++) {\n        col.push(renderSquare(i, j));\n      }\n      rows.push(<div className=\"board-row\">{col}</div>);\n    }\n    return rows;\n  }\n\n  return <div>{renderRows()}</div>;\n}\nlet x = 0,\n  y = 0;\n\nfunction Game() {\n  const [state, setState] = useState({\n    history: [\n      {\n        squares: Array(19).fill(Array(19).fill({ mark: \"\", step: 0 })),\n      },\n    ],\n    stepNumber: 0,\n    xIsNet: true,\n  });\n  function handkeClick(j, i) {\n    const history = state.history.slice(0, state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const newSquares = JSON.parse(JSON.stringify(current.squares));\n    if (winner || newSquares[j][i].mark) {\n      return;\n    }\n    newSquares[j][i] = {\n      mark: state.xIsNet ? \"X\" : \"O\",\n      step: state.stepNumber + 1,\n    };\n    x = j;\n    y = i;\n    setState({\n      history: history.concat([\n        {\n          squares: newSquares,\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNet: !state.xIsNet,\n    });\n  }\n\n  function jumpTo(step) {\n    setState({\n      history: state.history.slice(0, step + 1),\n      stepNumber: step,\n      xIsNet: step % 2 === 0,\n    });\n  }\n\n  const history = state.history;\n  const current = history[state.stepNumber];\n  const winner = calculateWinner(current.squares, x, y);\n  const moves = history.map((step, move) => {\n    const desc = move ? \"回到第 #\" + move + \" 步\" : \"回到起始點\";\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{desc}</button>\n      </li>\n    );\n  });\n\n  function saveBoardStatus() {\n    const today = new Date();\n    const formattedToday = today.toISOString().slice(0, 10);\n    html2canvas(document.querySelector(\".game-board\")).then((canvas) => {\n      const myCanvas = canvas;\n      myCanvas.toBlob((blob) => {\n        saveAs(blob, `${formattedToday + status}.png`);\n      });\n    });\n  }\n\n  const saveBtn = (\n    <li key={state.stepNumber}>\n      <button\n        onClick={() => {\n          saveBoardStatus();\n        }}\n      >\n        儲存棋譜\n      </button>\n    </li>\n  );\n  let status;\n  if (winner) {\n    const winnerMark = state.xIsNet === false ? \"黑\" : \"白\";\n    status = \"贏家: \" + winnerMark;\n  } else {\n    status = \"下一個玩家: \" + (state.xIsNet ? \"黑\" : \"白\");\n  }\n\n  return (\n    <div className=\"container\">\n      <header className=\"title\">\n        <h3>Gomoku</h3>\n      </header>\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            winner={winner}\n            onClick={(rowNum, i) => handkeClick(rowNum, i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n        {winner ? (\n          <div className=\"game-info\">\n            <ul>{saveBtn}</ul>\n          </div>\n        ) : null}\n      </div>\n      <footer>\n        <div>Made By John ❤</div>\n      </footer>\n    </div>\n  );\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}